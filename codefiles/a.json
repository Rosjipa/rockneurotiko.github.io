{"code": "use \"net/http\"\nuse \"collections\"\n\n// MAIN\nactor Main\n  new create(env: Env) =>\n    let serv: HttpServer = HttpServer(env)\n    serv.set_handler(TestPassHandler)\n    serv.start_server()\n\nprimitive TestPassHandler\n  fun val apply(request: Payload) =>\n    let response = Payload.response()\n    response.add_chunk(\"(From TestPassHandler) You asked for \")\n    response.add_chunk(request.url.path)\n\n    if request.url.query.size() > 0 then\n      response.add_chunk(\"?\")\n      response.add_chunk(request.url.query)\n    end\n\n    if request.url.fragment.size() > 0 then\n      response.add_chunk(\"#\")\n      response.add_chunk(request.url.fragment)\n    end\n\n    (consume request).respond(consume response)\n\n\n\n// CLASSES\nclass HttpServer\n  let _env: Env\n  var handler: RequestHandler\n\n  new create(env: Env) =>\n    _env = env\n    handler = HttpGeneralHandler(env)\n\n  fun ref set_handler(handler': RequestHandler) =>\n    handler = handler'\n\n  fun start_server(host: String = \"\", service: String = \"50000\", limit: U64 = 100) =>\n    // Choose log\n    Server(HttpConnect(_env), handler, CommonLog(_env.out) where host=host, service=service, limit=limit)\n\n\nclass HttpGeneralHandler is RequestHandler\n  let _env: Env\n\n  new val create(env: Env) =>\n    _env = env\n\n  fun val apply(request: Payload) =>\n    let path = request.url.path\n    _env.out.print(\"Asked for path: \" + path)\n    let response = Payload.response()\n    response.add_chunk(\"You asked for \")\n    response.add_chunk(request.url.path)\n\n    (consume request).respond(consume response)\n\n\nclass HttpConnect\n  let _env: Env\n\n  new iso create(env: Env) =>\n    _env = env\n\n  fun ref listening(server: Server ref) =>\n    try\n      (let host, let service) = server.local_address().name()\n      _env.out.print(\"Listening on \" + host + \":\" + service)\n    else\n      _env.out.print(\"Couldn't get local address.\")\n      server.dispose()\n    end\n\n  fun ref not_listening(server: Server ref) =>\n    _env.out.print(\"Failed to listen.\")\n\n  fun ref closed(server: Server ref) =>\n    _env.out.print(\"Shutdown.\")\n", "theme": "Monokai Sublime", "lang": "pony"}