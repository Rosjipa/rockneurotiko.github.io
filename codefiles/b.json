{
    "lang": "pony",
    "theme": "Monokai Sublime",
    "code": "use \"collections\"\n// Just a comment\nactor UDPSocket\n  var _notify: UDPNotify\n  var _fd: U32 = -1\n  var _event: EventID = Event.none()\n  var _readable: Bool = false\n  var _closed: Bool = false\n  var _packet_size: U64\n\n  new create(notify: UDPNotify iso, host: String = \"\", service: String = \"0\",\n    size: U64 = 1024)\n  =>\n    \"\"\"\n    Listens for both IPv4 and IPv6 datagrams.\n    \"\"\"\n    _notify = consume notify\n    _fd = @os_listen_udp[U32](this, host.cstring(), service.cstring())\n    _packet_size = size\n    _notify_listening()\n\n  new ip4(notify: UDPNotify iso, host: String = \"\", service: String = \"0\",\n    size: U64 = 1024)\n  =>\n    \"\"\"\n    Listens for IPv4 datagrams.\n    \"\"\"\n    _notify = consume notify\n    _fd = @os_listen_udp4[U32](this, host.cstring(), service.cstring())\n    _packet_size = size\n    _notify_listening()\n\n  new ip6(notify: UDPNotify iso, host: String = \"\", service: String = \"0\",\n    size: U64 = 1024)\n  =>\n    \"\"\"\n    Listens for IPv6 datagrams.\n    \"\"\"\n    _notify = consume notify\n    _fd = @os_listen_udp6[U32](this, host.cstring(), service.cstring())\n    _packet_size = size\n    _notify_listening()\n\n  be write(data: Bytes, to: IPAddress) =>\n    \"\"\"\n    Write a single sequence of bytes.\n    \"\"\"\n    _write(data, to)\n\n  be writev(data: BytesList val, to: IPAddress) =>\n    \"\"\"\n    Write a sequence of sequences of bytes.\n    \"\"\"\n    try\n      for bytes in data.values() do\n        _write(bytes, to)\n      end\n    end\n\n  fun ref _write(data: Bytes, to: IPAddress) =>\n    \"\"\"\n    Write the datagram to the socket.\n    \"\"\"\n    if not _closed then\n      try\n        @os_sendto[U64](_fd, data.cstring(), data.size(), to) ?\n      else\n        _close()\n      end\n    end\n\n  be dispose() =>\n    \"\"\"\n    Stop listening.\n    \"\"\"\n    _close()\n\n  fun local_address(): IPAddress =>\n    \"\"\"\n    Return the bound IP address.\n    \"\"\"\n    let ip = recover IPAddress end\n    @os_sockname[None](_fd, ip)\n    ip\n\n  fun ref set_notify(notify: UDPNotify) =>\n    \"\"\"\n    Change the notifier.\n    \"\"\"\n    _notify = notify\n\n  be _event_notify(event: EventID, flags: U32) =>\n    \"\"\"\n    When we are readable, we accept new connections until none remain.\n    \"\"\"\n    if not _closed then\n      _event = event\n\n      if Event.readable(flags) then\n        _readable = true\n        _pending_reads()\n      end\n    end\n\n    if Event.disposable(flags) then\n      _event = Event.dispose(event)\n    end\n\n  be _read_again() =>\n    \"\"\"\n    Resume reading.\n    \"\"\"\n    if not _closed then\n      _pending_reads()\n    end\n\n  fun ref _pending_reads() =>\n    \"\"\"\n    Read while data is available, guessing the next packet length as we go. If\n    we read 4 kb of data, send ourself a resume message and stop reading, to\n    avoid starving other actors.\n    \"\"\"\n    try\n      var sum: U64 = 0\n\n      while _readable do\n        var len = _packet_size\n        var data = recover Array[U8].undefined(len) end\n        var from = recover IPAddress end\n        len = @os_recvfrom[U64](_fd, data.cstring(), data.space(), from) ?\n\n        if len == 0 then\n          _readable = false\n          return\n        end\n\n        data.truncate(len)\n        _notify.received(this, consume data, consume from)\n\n        sum = sum + len\n\n        if sum > (1 << 12) then\n          _read_again()\n          return\n        end\n      end\n    else\n      _close()\n    end\n\n  fun ref _notify_listening() =>\n    \"\"\"\n    Inform the notifier that we're listening.\n    \"\"\"\n    if _fd != -1 then\n      _notify.listening(this)\n    else\n      _notify.not_listening(this)\n    end\n\n  fun ref _close() =>\n    \"\"\"\n    Inform the notifier that we've closed.\n    \"\"\"\n    Event.unsubscribe(_event)\n    _readable = false\n    _closed = true\n\n    if _fd != -1 then\n      _notify.closed(this)\n      @os_closesocket[None](_fd)\n      _fd = -1\n    end"
}